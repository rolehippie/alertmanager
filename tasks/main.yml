---
- name: Create system group
  when:
    - alertmanager_installation == 'native'
  ansible.builtin.group:
    name: alertmanager
    system: true
    state: present
  tags:
    - alertmanager

- name: Create system user
  when:
    - alertmanager_installation == 'native'
  ansible.builtin.user:
    name: alertmanager
    group: alertmanager
    password: "!"
    shell: /usr/sbin/nologin
    home: /var/lib/alertmanager
    create_home: false
    system: true
    state: present
  tags:
    - alertmanager

- name: Create required directories
  loop: "{{ alertmanager_default_folders + alertmanager_extra_folders }}"
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ 'alertmanager' if alertmanager_installation == 'native' else 'nobody' }}"
    group: "{{ 'alertmanager' if alertmanager_installation == 'native' else 'nogroup' }}"
    mode: u=rwx,g=rx,o=rx
    state: directory
  tags:
    - alertmanager

- name: Check existing install
  when:
    - alertmanager_installation == 'native'
  register: alertmanager_version_check
  failed_when: false
  changed_when: false
  check_mode: false
  ansible.builtin.shell: /usr/bin/alertmanager --version 2>&1
  tags:
    - alertmanager

- name: Fact version change
  when:
    - alertmanager_installation == 'native'
  ansible.builtin.set_fact:
    alertmanager_version_changed: "{{ alertmanager_version_check.rc != 0 or (alertmanager_version_check.stdout_lines is defined and alertmanager_version not in alertmanager_version_check.stdout_lines[0]) | bool }}"
  tags:
    - alertmanager

- name: Download release tarball
  when:
    - alertmanager_installation == 'native'
    - alertmanager_version_changed
  notify:
    - Restart alertmanager
  ansible.builtin.unarchive:
    src: "{{ alertmanager_download }}"
    dest: /usr/local/src
    remote_src: true
    owner: root
    group: root
  tags:
    - alertmanager

- name: Copy downloaded binaries
  when:
    - alertmanager_installation == 'native'
    - alertmanager_version_changed
    - not ansible_check_mode
  notify:
    - Restart alertmanager
  loop:
    - alertmanager
    - amtool
  ansible.builtin.copy:
    src: "/usr/local/src/alertmanager-{{ alertmanager_version }}.linux-{{ alertmanager_arch }}/{{ item }}"
    dest: "/usr/bin/{{ item }}"
    remote_src: true
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  tags:
    - alertmanager

- name: Templates from url
  notify:
    - Restart alertmanager
  loop: "{{ alertmanager_default_templates + alertmanager_extra_templates }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.url is defined
    - item.url is not none
    - item.state | default("present") == "present"
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "{{ item.path | default('/etc/alertmanager/templates') }}/{{ item.name }}.tmpl"
    owner: "{{ 'alertmanager' if alertmanager_installation == 'native' else 'nobody' }}"
    group: "{{ 'alertmanager' if alertmanager_installation == 'native' else 'nogroup' }}"
    mode: o=rw,g=r,o=r
  tags:
    - alertmanager

- name: Templates from content
  notify:
    - Restart alertmanager
  loop: "{{ alertmanager_default_templates + alertmanager_extra_templates }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.content is defined
    - item.content is not none
    - item.state | default("present") == "present"
  ansible.builtin.copy:
    content: "{{ item.content }}"
    dest: "{{ item.path | default('/etc/alertmanager/templates') }}/{{ item.name }}.tmpl"
    owner: "{{ 'alertmanager' if alertmanager_installation == 'native' else 'nobody' }}"
    group: "{{ 'alertmanager' if alertmanager_installation == 'native' else 'nogroup' }}"
    mode: o=rw,g=r,o=r
  tags:
    - alertmanager

- name: Templates from file
  notify:
    - Restart alertmanager
  loop: "{{ alertmanager_default_templates + alertmanager_extra_templates }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.src is defined
    - item.src is not none
    - item.state | default("present") == "present"
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.path | default('/etc/alertmanager/templates') }}/{{ item.name }}.tmpl"
    owner: alertmanager
    group: alertmanager
    mode: o=rw,g=r,o=r
  tags:
    - alertmanager

- name: Delete defined templates
  notify:
    - Restart alertmanager
  loop: "{{ alertmanager_default_templates + alertmanager_extra_templates }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.state | default("present") == "absent"
  ansible.builtin.file:
    path: "{{ item.path | default('/etc/alertmanager/templates') }}/{{ item.name }}.tmpl"
    state: absent
  tags:
    - alertmanager

- name: Write general config
  notify:
    - Restart alertmanager
  ansible.builtin.template:
    src: config.j2
    dest: /etc/alertmanager/config.yml
    owner: "{{ 'alertmanager' if alertmanager_installation == 'native' else 'nobody' }}"
    group: "{{ 'alertmanager' if alertmanager_installation == 'native' else 'nogroup' }}"
    mode: u=rw,g=r,o=r
  tags:
    - alertmanager

- name: Write default config
  notify:
    - Restart alertmanager
  ansible.builtin.template:
    src: default.j2
    dest: /etc/default/alertmanager
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags:
    - alertmanager

- name: Write service file
  notify:
    - Restart alertmanager
  ansible.builtin.template:
    src: service.j2
    dest: /etc/systemd/system/alertmanager.service
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags:
    - alertmanager

- name: Pull docker image
  when:
    - alertmanager_installation == 'docker'
    - alertmanager_pull_image
  community.docker.docker_image:
    name: "{{ alertmanager_image }}"
    source: pull
  tags:
    - alertmanager

- name: Create docker network
  when:
    - alertmanager_installation == 'docker'
    - false if alertmanager_network is none else (alertmanager_network | length > 0)
  community.docker.docker_network:
    name: '{{ alertmanager_network }}'
  tags:
    - alertmanager

- name: Start alertmanager service
  ansible.builtin.systemd:
    name: alertmanager
    state: started
    daemon_reload: true
    masked: false
    enabled: true
  tags:
    - alertmanager

- name: Remove install directory
  when:
    - alertmanager_installation == 'native'
  ansible.builtin.file:
    path: "/usr/local/src/alertmanager-{{ alertmanager_version }}.linux-{{ alertmanager_arch }}"
    state: absent
  tags:
    - alertmanager

- name: Include oauth2 tasks
  when:
    - alertmanager_oauth2_enabled
  ansible.builtin.include_tasks: oauth2.yml
  tags:
    - alertmanager
    - oauth2

...
